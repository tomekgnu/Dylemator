/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package dylemator;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultCaret;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author a144899
 */
public class FindDialog extends javax.swing.JDialog {

    /**
     * Creates new form FindDialog
     */
    private final JFrame parent;
    private final Dimension originalSize;
    private final String[] placeCodes = new String[]{"","Wieś","Małe miasto","Duże miasto"};
    private final String[] genderCodes = new String[]{"","Mężczyzna","Kobieta"};
    private final String[] handednessCodes = new String[]{"","Praworęcz.","Leworęcz."};
    private final String[] yesnoCodes = new String[]{"","Tak","Nie"};
    /**
     *
     * @param parent
     * @param modal
     */
    public FindDialog(javax.swing.JFrame parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
        this.originalSize = this.getSize();
        this.resultsPane.setVisible(false);
        this.setSize(new Dimension(originalSize.width,originalSize.height / 3));
        DefaultCaret caret = (DefaultCaret) resultsArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
    }

    
    static boolean codeExists(String code){
        File codeFile = new File("Kody_osob.txt");
        if(codeFile.exists() == false){
            try {
                codeFile.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(FindDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        InputStreamReader input;
        try {
            input = new FileReader(codeFile);
            BufferedReader bufferReader;
            bufferReader = new BufferedReader(input);
            String line;
            while((line = bufferReader.readLine()) != null){
                if(line.equals(code)){
                    return true;
                }
            }
            bufferReader.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FindDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FindDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        return false;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchPanel = new javax.swing.JPanel();
        findButton = new javax.swing.JButton();
        codeInput = new javax.swing.JTextField();
        codeLabel = new javax.swing.JLabel();
        notFoundLabel = new javax.swing.JLabel();
        resultsPanel = new javax.swing.JPanel();
        resultsPane = new javax.swing.JScrollPane();
        resultsArea = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        searchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        searchPanel.setPreferredSize(new java.awt.Dimension(0, 0));

        findButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        findButton.setText("Szukaj");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        codeInput.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        codeInput.setMaximumSize(new java.awt.Dimension(10, 10));
        codeInput.setMinimumSize(new java.awt.Dimension(10, 21));
        codeInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                codeInputFocusGained(evt);
            }
        });

        codeLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        codeLabel.setText("Kod szukanej osoby:");

        notFoundLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        notFoundLabel.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(searchPanelLayout.createSequentialGroup()
                                .addComponent(codeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addComponent(findButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(codeLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(notFoundLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(codeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(notFoundLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        resultsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        resultsPanel.setPreferredSize(new java.awt.Dimension(273, 123));
        resultsPanel.setVerifyInputWhenFocusTarget(false);

        resultsPane.setViewportView(resultsArea);

        javax.swing.GroupLayout resultsPanelLayout = new javax.swing.GroupLayout(resultsPanel);
        resultsPanel.setLayout(resultsPanelLayout);
        resultsPanelLayout.setHorizontalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resultsPane)
                .addContainerGap())
        );
        resultsPanelLayout.setVerticalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resultsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(resultsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(resultsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        String code = this.codeInput.getText();
        if(codeExists(code) == false){
           this.notFoundLabel.setText("Nie odnaleziono kodu!");
           this.setSize(new Dimension(originalSize.width,originalSize.height / 3));
           return;
        }
        File dir = new File(".");
        File[] files = dir.listFiles();
        for(File f:files){
            if(f.isDirectory())
                continue;
            String filename = f.getName();
            if(filename.startsWith("Odpowiedzi_")){
                try {
                    InputStreamReader input = new FileReader(filename);
                    BufferedReader bufferReader;
                    bufferReader = new BufferedReader(input);
                    String line = bufferReader.readLine();
                    String[] headers = line.split(";");
                    while((line = bufferReader.readLine()) != null){
                       String[] fields = line.split(";");
                       if(code.equals(fields[0])){
                           this.notFoundLabel.setText("");
                           this.setSize(originalSize);
                           this.resultsPane.setVisible(true);
                           displayUserDetails(headers,fields);
                           
                           
//                           UserDialog userDialog = new UserDialog(null,true);
//                           userDialog.setUserData(fields);
//                           userDialog.disableButton();
//                           userDialog.setVisible(true);
                           return;
                       }
                      
                    }
                }   
                catch (FileNotFoundException ex) {
                        Logger.getLogger(FindDialog.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(FindDialog.class.getName()).log(Level.SEVERE, null, ex);
                    }
            }
        }
        
        this.notFoundLabel.setText("Nie odnaleziono wyników!");
        this.setSize(new Dimension(originalSize.width,originalSize.height / 3));
          
    }//GEN-LAST:event_findButtonActionPerformed

    private void codeInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_codeInputFocusGained
        this.codeInput.setText(null);
    }//GEN-LAST:event_codeInputFocusGained

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.resultsArea.setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FindDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FindDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FindDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FindDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FindDialog dialog = new FindDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField codeInput;
    private javax.swing.JLabel codeLabel;
    private javax.swing.JButton findButton;
    private javax.swing.JLabel notFoundLabel;
    private javax.swing.JTextPane resultsArea;
    private javax.swing.JScrollPane resultsPane;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JPanel searchPanel;
    // End of variables declaration//GEN-END:variables

    private void displayUserDetails(String[] headers,String[] fields) {
        try{
            fields = translateFields(fields);
        }
        catch(Exception ex){
            resultsArea.setText(ex.toString());
            return;
        }
        resultsArea.setText("");        
        StyledDocument doc = resultsArea.getStyledDocument();
        SimpleAttributeSet keyWord = new SimpleAttributeSet();
        StyleConstants.setForeground(keyWord, Color.BLUE);
        StyleConstants.setBold(keyWord, true);
        int caretPosition = 0;
        try {
            for(int i = 0; i < fields.length;i++){
                String header = headers[i];
                String value = fields[i];
                String line = header + ": " + value + "\n";
                doc.insertString(caretPosition, line, null);
                doc.setCharacterAttributes(caretPosition, header.length() + 1, keyWord, true);
                caretPosition += line.length();
                resultsArea.setCaretPosition(caretPosition);
                resultsArea.moveCaretPosition(caretPosition);
                
            }
            resultsArea.setCaretPosition(0);
            resultsArea.moveCaretPosition(0);
            resultsPane.getViewport().scrollRectToVisible(new Rectangle(0, 0, 0, 0));
        } catch (BadLocationException ex) {
            Logger.getLogger(FindDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private String[] translateFields(String[] fields) {
        int genderCode = Integer.parseInt(fields[6]);
        fields[5] = genderCodes[genderCode];
        int placeCode = Integer.parseInt(fields[6]);
        fields[6] = placeCodes[placeCode];
        int handednessCode = Integer.parseInt(fields[7]);
        fields[7] = handednessCodes[handednessCode];
        int headCode = Integer.parseInt(fields[9]);
        fields[9] = yesnoCodes[headCode];
        int neur = Integer.parseInt(fields[10]);
        fields[10] = yesnoCodes[neur];
        int psych = Integer.parseInt(fields[11]);
        fields[11] = yesnoCodes[psych];
        int drug = Integer.parseInt(fields[12]);
        fields[12] = yesnoCodes[drug];
        int memory = Integer.parseInt(fields[13]);
        fields[13] = yesnoCodes[memory];
        int addict = Integer.parseInt(fields[14]);
        fields[14] = yesnoCodes[addict];
        return fields;        
    }
}
