/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package dylemator;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JLabel;

/**
 *
 * @author nanker
 */
public class QuestionDialog extends javax.swing.JDialog {

    DylematorUI parent; 
    List<Dilemma> selected = new ArrayList<Dilemma>();
    private HashMap<String,Dilemma> map = new HashMap<String, Dilemma>();
    private int numOfPers = 0;
    private int numOfNonpers = 0;
    private int numOfNonmor = 0;
    private final List<Dilemma> listOfDilemmas = new ArrayList<Dilemma>();
    private int currentQuestion = 0;
    
    public QuestionDialog(DylematorUI parent, boolean b) {
        super(parent, b);
        this.parent = parent;
        initComponents();
                
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        questionPanel = new javax.swing.JPanel();
        numberCb = new javax.swing.JComboBox();
        personalCb = new javax.swing.JComboBox();
        nonpersonalCb = new javax.swing.JComboBox();
        nonmoralCb = new javax.swing.JComboBox();
        assignButton = new javax.swing.JButton();
        nLabel = new javax.swing.JLabel();
        personalLabel = new javax.swing.JLabel();
        nonpersonalLabel = new javax.swing.JLabel();
        nonmoralLabel = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        okButton = new javax.swing.JButton();

        questionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Wybór dylematów", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N

        numberCb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberCbActionPerformed(evt);
            }
        });

        personalCb.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        personalCb.setPreferredSize(new java.awt.Dimension(32, 22));

        nonpersonalCb.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        nonpersonalCb.setMinimumSize(new java.awt.Dimension(32, 22));
        nonpersonalCb.setPreferredSize(new java.awt.Dimension(32, 22));

        nonmoralCb.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        nonmoralCb.setMinimumSize(new java.awt.Dimension(32, 22));
        nonmoralCb.setPreferredSize(new java.awt.Dimension(32, 22));

        assignButton.setText("Dodaj");
        assignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignButtonActionPerformed(evt);
            }
        });

        nLabel.setText("Numer");

        personalLabel.setText("Osobiste");

        nonpersonalLabel.setText("Nieosobiste");

        nonmoralLabel.setText("Pozamoralne");

        deleteButton.setText("Usuń");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        errorLabel.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        clearButton.setText("Wyczyść listę");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout questionPanelLayout = new javax.swing.GroupLayout(questionPanel);
        questionPanel.setLayout(questionPanelLayout);
        questionPanelLayout.setHorizontalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numberCb, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nLabel))
                .addGap(45, 45, 45)
                .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(questionPanelLayout.createSequentialGroup()
                        .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nonmoralLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nonpersonalLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(nonpersonalCb, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nonmoralCb, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(personalCb, 0, 189, Short.MAX_VALUE)))
                    .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35)
                .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(assignButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        questionPanelLayout.setVerticalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionPanelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(questionPanelLayout.createSequentialGroup()
                        .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(questionPanelLayout.createSequentialGroup()
                                .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(personalCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(personalLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(nonpersonalCb, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nonpersonalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(nonmoralCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nonmoralLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(questionPanelLayout.createSequentialGroup()
                                .addComponent(nLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numberCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(questionPanelLayout.createSequentialGroup()
                        .addComponent(assignButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton)
                        .addContainerGap())))
        );

        textArea.setColumns(20);
        textArea.setRows(5);
        scrollPane.setViewportView(textArea);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(337, 337, 337)
                        .addComponent(okButton)
                        .addGap(0, 274, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(questionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(questionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(okButton)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void numberCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberCbActionPerformed
        currentQuestion = numberCb.getSelectedIndex();
    }//GEN-LAST:event_numberCbActionPerformed

    private void assignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignButtonActionPerformed
        int numOfSelected = 0;
        String key = "";
        if(!personalCb.getSelectedItem().equals("---")){
            numOfSelected++;
            key = "1." + (personalCb.getSelectedIndex() + 1);
        }
        if(!nonpersonalCb.getSelectedItem().equals("---")){
            numOfSelected++;
            key = "2." + (nonpersonalCb.getSelectedIndex() + 1);
        }
        if(!nonmoralCb.getSelectedItem().equals("---")){
            numOfSelected++;
            key = "3." + (nonmoralCb.getSelectedIndex() + 1);
        }
                  
        if(numOfSelected != 1){
            personalCb.setBackground(Color.pink);
            nonpersonalCb.setBackground(Color.pink);
            nonmoralCb.setBackground(Color.pink);
        }
        else{
            personalCb.setBackground(Color.white);
            nonpersonalCb.setBackground(Color.white);
            nonmoralCb.setBackground(Color.white);           
            Dilemma d = map.get(key);
            this.errorLabel.setText("");
            if(listOfDilemmas.contains(d)){
                this.errorLabel.setText("Ten dylemat już jest na liście!");
                return;
            }
            if(d != null){
                if(listOfDilemmas.size() > currentQuestion && listOfDilemmas.get(currentQuestion) != null){
                    listOfDilemmas.remove(currentQuestion);
                    listOfDilemmas.add(currentQuestion,d);
                }
                else{
                    listOfDilemmas.add(d);
                    numberCb.addItem(listOfDilemmas.size() + 1);
                    numberCb.setSelectedIndex(listOfDilemmas.size());
                    currentQuestion = listOfDilemmas.size();
                }
                personalCb.setSelectedIndex(personalCb.getItemCount() - 1);
                nonpersonalCb.setSelectedIndex(nonpersonalCb.getItemCount() - 1);
                nonmoralCb.setSelectedIndex(nonmoralCb.getItemCount() - 1);
                this.textArea.setText("");
                for(int i = 0; i < listOfDilemmas.size();i++){
                    Dilemma next = listOfDilemmas.get(i);
                    String num = "" + (i + 1) + ". " + next.getName() + "\n";
                    this.textArea.append(num);
                    
                }
                
        }
    }//GEN-LAST:event_assignButtonActionPerformed
    }
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if(listOfDilemmas.isEmpty())
            return;
        listOfDilemmas.remove(currentQuestion);
        numberCb.removeAllItems();
        this.textArea.setText("");
        for(int i = 0; i < listOfDilemmas.size();i++){
            Dilemma next = listOfDilemmas.get(i);
            String num = "" + (i + 1) + ". " + next.getName() + "\n";
            this.textArea.append(num);
            numberCb.addItem(i + 1);
        }
        numberCb.addItem(listOfDilemmas.size() + 1);
        numberCb.setSelectedIndex(listOfDilemmas.size());
        currentQuestion = listOfDilemmas.size();
        personalCb.setSelectedIndex(personalCb.getItemCount() - 1);
        nonpersonalCb.setSelectedIndex(nonpersonalCb.getItemCount() - 1);
        nonmoralCb.setSelectedIndex(nonmoralCb.getItemCount() - 1);
        this.textArea.setText("");
        for(int i = 0; i < listOfDilemmas.size();i++){
            Dilemma next = listOfDilemmas.get(i);
            String num = "" + (i + 1) + ". " + next.getName() + "\n";
            this.textArea.append(num);
            
        }
        
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if(listOfDilemmas.isEmpty()){
            errorLabel.setText("Nie dodano żadnych dylematów!");
            return;
        }
        this.parent.setSelectedNumbers(this.listOfDilemmas);
        this.setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        this.listOfDilemmas.clear();
        this.textArea.setText("");
        this.numberCb.removeAllItems();
        this.numberCb.addItem("1");
        this.numberCb.setSelectedIndex(0);
    }//GEN-LAST:event_clearButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel nLabel;
    private javax.swing.JComboBox nonmoralCb;
    private javax.swing.JLabel nonmoralLabel;
    private javax.swing.JComboBox nonpersonalCb;
    private javax.swing.JLabel nonpersonalLabel;
    private javax.swing.JComboBox numberCb;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox personalCb;
    private javax.swing.JLabel personalLabel;
    private javax.swing.JPanel questionPanel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DylematorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DylematorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DylematorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DylematorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
    
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuestionDialog(null,true).setVisible(true);
                
            }
        });
    }

    void clearAll(){
        this.textArea.setText(null);
        this.errorLabel.setText(null);
    }
    void setDilemmas(List<Dilemma> list) {
        numOfPers = 0;
        numOfNonmor = 0;
        numOfNonpers = 0;
        numberCb.removeAllItems();
        
        for(Dilemma d:list){
            String type = d.getType();
            String name = d.getName();
            String key = "";
             if(type.equals("personal")){
               numOfPers++;
               key = "1." + numOfPers;
               personalCb.addItem(name);
     
            }
            else if(type.equals("nonpersonal")){
                numOfNonpers++;
                key = "2." + numOfNonpers;
                nonpersonalCb.addItem(name);
            }
            else if(type.equals("nonmoral")){
                numOfNonmor++;
                key = "3." + numOfNonmor;
                nonmoralCb.addItem(name);
            }
             
            map.put(key,d);
        }
        
        if(map.isEmpty())
            return;
        
        personalCb.addItem("---");
        nonpersonalCb.addItem("---");
        nonmoralCb.addItem("---");
        numberCb.addItem("1");
        
        personalCb.setSelectedIndex(numOfPers);
        nonpersonalCb.setSelectedIndex(numOfNonpers);
        nonmoralCb.setSelectedIndex(numOfNonmor);
                
    }
}
