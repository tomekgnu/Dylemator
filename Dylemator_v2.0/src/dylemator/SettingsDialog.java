/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package dylemator;

import java.awt.Color;
import java.awt.Font;
import java.util.HashMap;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;

/**
 *
 * @author a144899
 */
public class SettingsDialog extends javax.swing.JDialog {
    DylematorUI parent;
    private boolean random = false;
    private int wordsPerMinute;
    private int decision = 0;
    private float fontSize = 24;
    private int numOfItems;
    private final HashMap<String,JComboBox> personalCombos = new HashMap<String, JComboBox>();
    private final HashMap<String,JComboBox> nonpersonalCombos = new HashMap<String, JComboBox>();
    private final HashMap<String,JComboBox> nonmoralCombos = new HashMap<String, JComboBox>();
    private boolean warmups = false;
    
    boolean getWarmups(){
        return this.warmups;
    }
    int getDecision(){
        return this.decision;
    }
    boolean getRandom(){
        return this.random;
    }
    
    int getWordsPerMinute(){
        return this.wordsPerMinute;
    }
    
    void setWarmups(boolean w){
        this.warmups = w;
    }
    void setRandom(boolean b) {
        this.random = b;
        this.randomQuestions.setSelected(b);
      }
    void setWordsPerMinute(int s){
        this.wordsPerMinute = s;
        this.numOfSeconds.setText(new Integer(wordsPerMinute).toString());
    }

    /**
     * Creates new form SelectionDialog
     */
    public SettingsDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.wordsPerMinute = 180;
        this.numOfItems = 0;
        this.parent = (DylematorUI)parent;
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        panel2 = new javax.swing.JPanel();
        decisionCombo = new javax.swing.JComboBox();
        randomQuestions = new javax.swing.JCheckBox();
        numOfSeconds = new javax.swing.JTextField();
        randomQuestionsLabel = new javax.swing.JLabel();
        decisionLabel = new javax.swing.JLabel();
        numOfSecondsLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fontComboBox = new javax.swing.JComboBox();
        fontSampleLabel = new javax.swing.JLabel();
        warmupsCheckbox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setFocusable(false);
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        okButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        panel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ustawienie wyświetlania", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        decisionCombo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        decisionCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Prowadzący badanie", "Osoba badana" }));
        decisionCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decisionComboActionPerformed(evt);
            }
        });

        randomQuestions.setSelected(true);
        randomQuestions.setFocusable(false);
        randomQuestions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomQuestionsActionPerformed(evt);
            }
        });

        numOfSeconds.setText("180");
        numOfSeconds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numOfSecondsActionPerformed(evt);
            }
        });

        randomQuestionsLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        randomQuestionsLabel.setText("Losowa kolejność wyświetlania pytań");

        decisionLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        decisionLabel.setText("Decyduje o czasie wyświetlenia tekstu");

        numOfSecondsLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        numOfSecondsLabel.setText("Tempo czytania (liczba słów na minutę)");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Wielkość czcionki");

        fontComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        fontComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "24", "36" }));
        fontComboBox.setFocusable(false);
        fontComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontComboBoxActionPerformed(evt);
            }
        });

        fontSampleLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        fontSampleLabel.setText("Tekst...");

        warmupsCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warmupsCheckboxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("Rozbiegówki");

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(decisionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(randomQuestionsLabel)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel2Layout.createSequentialGroup()
                                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(warmupsCheckbox)
                                    .addComponent(randomQuestions))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(panel2Layout.createSequentialGroup()
                                .addComponent(decisionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numOfSecondsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panel2Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(51, 51, 51)
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fontComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numOfSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addComponent(fontSampleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(warmupsCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(randomQuestions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(randomQuestionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decisionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decisionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numOfSecondsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numOfSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fontComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(fontSampleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(250, 250, 250))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void decisionComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decisionComboActionPerformed
        JComboBox box = (JComboBox) evt.getSource();
        if(box.getSelectedIndex() == 0){
            this.numOfSeconds.setEditable(true);
        }
        else{
            this.numOfSeconds.setEditable(false);
        }
        this.decision = this.decisionCombo.getSelectedIndex();
    }//GEN-LAST:event_decisionComboActionPerformed

    private void randomQuestionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomQuestionsActionPerformed
//        if(this.randomQuestions.isSelected()){
//            for(String cb:comboBoxes.keySet()){
//                if(comboBoxes.get(cb).getSelectedIndex() != this.numOfItems)
//                    comboBoxes.get(cb).setEnabled(false);
//            }
//        }
//        else{
//            for(String cb:comboBoxes.keySet()){
//                if(comboBoxes.get(cb).getSelectedIndex() != this.numOfItems)
//                    comboBoxes.get(cb).setEnabled(true);
//            }
//        }
    }//GEN-LAST:event_randomQuestionsActionPerformed

    private void numOfSecondsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numOfSecondsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numOfSecondsActionPerformed

    private void fontComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontComboBoxActionPerformed
        this.fontSize = Float.parseFloat((String)this.fontComboBox.getSelectedItem());
        parent.setFontSize(this.fontSize);
        Font font = fontSampleLabel.getFont().deriveFont(this.fontSize);
        this.fontSampleLabel.setFont(font);
    }//GEN-LAST:event_fontComboBoxActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
    }//GEN-LAST:event_formWindowClosing

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
                       
        try{
            this.wordsPerMinute = Integer.parseInt(this.numOfSeconds.getText());
        }
        catch(NumberFormatException ex){
            this.numOfSecondsLabel.setForeground(Color.red);
            return;
        }

        this.random = this.randomQuestions.isSelected();
        this.warmups = this.warmupsCheckbox.isSelected();
        this.setVisible(false);

    }//GEN-LAST:event_okButtonActionPerformed

    private void warmupsCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warmupsCheckboxActionPerformed
        this.warmups = ((JCheckBox)evt.getSource()).isSelected();
    }//GEN-LAST:event_warmupsCheckboxActionPerformed
    
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SettingsDialog dialog = new SettingsDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox decisionCombo;
    private javax.swing.JLabel decisionLabel;
    private javax.swing.JComboBox fontComboBox;
    private javax.swing.JLabel fontSampleLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField numOfSeconds;
    private javax.swing.JLabel numOfSecondsLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel panel2;
    private javax.swing.JCheckBox randomQuestions;
    private javax.swing.JLabel randomQuestionsLabel;
    private javax.swing.JCheckBox warmupsCheckbox;
    // End of variables declaration//GEN-END:variables

    float getFontSize() {
        return this.fontSize;
    }

    private void checkPersonalSelection(JComboBox cb,int number) {
        
            String cbBelow = "personalCombo" + (number + 1);
            if(number == 15)
                return;
            if(cb.getSelectedIndex() != this.numOfItems){
                this.personalCombos.get(cbBelow).setEnabled(true);
                
            }
            else{
               
                for(int i = number + 1; i <= 15; i++ ){
                    cbBelow = "personalCombo" + i;
                    this.personalCombos.get(cbBelow).setEnabled(false);
                }
            }
        
    }   

    private void checkNonpersonalSelection(JComboBox cb,int number) {
        String cbBelow = "nonpersonalCombo" + (number + 1);
            if(number == 15)
                return;
            if(cb.getSelectedIndex() != this.numOfItems){
                this.nonpersonalCombos.get(cbBelow).setEnabled(true);
                
            }
            else{
               
                for(int i = number + 1; i <= 15; i++ ){
                    cbBelow = "nonpersonalCombo" + i;
                    this.nonpersonalCombos.get(cbBelow).setEnabled(false);
                }
            }
    }

    private void checkNonmoralSelection(JComboBox cb,int number) {
        String cbBelow = "nonmoralCombo" + (number + 1);
            if(number == 15)
                return;
            if(cb.getSelectedIndex() != this.numOfItems){
                this.nonmoralCombos.get(cbBelow).setEnabled(true);
                
            }
            else{
               
                for(int i = number + 1; i <= 15; i++ ){
                    cbBelow = "nonmoralCombo" + i;
                    this.nonmoralCombos.get(cbBelow).setEnabled(false);
                }
            }
    }
}


